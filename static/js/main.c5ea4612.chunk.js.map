{"version":3,"sources":["itens.js","Fp.js","menu.js","pageload.js","App.js","serviceWorker.js","index.js"],"names":["Itens","className","this","props","cl","src","icon","title","Component","Fp","name","ln","tit","cn","tp","Object","keys","dt","Skills","map","key","experience","menu","section","activeClass","to","color","spy","smooth","offset","duration","onSetActive","handleSetActive","pageload","state","cln","temlist","onClick","nm","length","console","log","temletter","setState","followMouse","subtitle","links","url","cnt","lin","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5ea4612.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\n\r\nclass Itens extends Component {\r\n  render() {\r\n    return (\r\n      <div className={this.props.cl}>\r\n        <img src={this.props.icon} className=\"itemimg\"></img>\r\n        <p>{this.props.title}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Itens;\r\n","import React, { Component } from \"react\";\r\nimport { Link, Element } from \"react-scroll\";\r\nimport dt from \"./resume.json\";\r\nimport Itens from \"./itens\";\r\nimport itens from \"./itens\";\r\nclass Fp extends Component {\r\n  render() {\r\n    function Getitem(props) {\r\n      const tp = props.tp;\r\n      if (tp == \"Skills\") {\r\n        return (\r\n          <div>\r\n            {Object.keys(dt.Skills).map(key => {\r\n              return (\r\n                <Itens\r\n                  cl=\"items\"\r\n                  title={dt.Skills[key].title}\r\n                  icon={dt.Skills[key].icon}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        );\r\n      }\r\n      if (tp == \"Experience\") {\r\n        return (\r\n          <div>\r\n            {Object.keys(dt.experience).map(key => {\r\n              return (\r\n                <Itens\r\n                  cl=\"items2\"\r\n                  title={dt.experience[key].title}\r\n                  icon={dt.experience[key].icon}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        );\r\n      }\r\n      if (tp != \"Projects\" && tp != \"Experience\") {\r\n        return <div></div>;\r\n      }\r\n    }\r\n    return (\r\n      <div className={this.props.cl}>\r\n        <Element name={\"test\" + this.props.ln} className=\"element\"></Element>\r\n        <div className={this.props.cl}>\r\n          <h1 className=\"title\">{this.props.tit}</h1>\r\n          <div className=\"pp\">{this.props.cn}</div>\r\n          <Getitem tp={this.props.tit} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Fp;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport dt from \"./resume.json\";\r\nimport { Link, Element } from \"react-scroll\";\r\n\r\nclass menu extends Component {\r\n  render() {\r\n    return  <div className=\"mnbar\">\r\n    {Object.keys(dt.section).map(key => {\r\n     return (\r\n         \r\n       <Link className=\"mnu\" activeClass=\"active\" to={'test'+dt.section[key].color} spy={true} smooth={true} offset={0} duration={2000} onSetActive={this.handleSetActive}>\r\n        {dt.section[key].title}\r\n       </Link> \r\n       );\r\n   })}\r\n</div>;\r\n  }\r\n}\r\nexport default menu;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport dt from \"./resume.json\";\r\nimport { SocialIcon } from \"react-social-icons\";\r\nimport Fp from \"./Fp.js\";\r\nimport { Link, Element } from \"react-scroll\";\r\nimport Menu from \"./menu\";\r\nimport SnowStorm from \"react-snowstorm\";\r\n\r\nclass pageload extends Component {\r\n  state = {\r\n    cl: \"a\",\r\n    cln: 1\r\n  };\r\n\r\n  render() {\r\n    let temlist = [\"a\", \"b\"];\r\n\r\n    return (\r\n      <div className=\"maindiv\">\r\n        <img\r\n          src=\"pantone.png\"\r\n          className=\"pant\"\r\n          onClick={() => {\r\n            let nm = (this.state.cln + 1) % temlist.length;\r\n            console.log(nm);\r\n            let temletter = temlist[nm];\r\n            console.log(temletter);\r\n            this.setState({\r\n              cl: temletter,\r\n              cln: nm\r\n            });\r\n          }}\r\n        />\r\n        <Menu></Menu>\r\n\r\n        <div>\r\n          <Link\r\n            activeClass=\"active\"\r\n            to=\"test1\"\r\n            spy={true}\r\n            smooth={true}\r\n            offset={0}\r\n            duration={2000}\r\n            onSetActive={this.handleSetActive}\r\n          >\r\n            <img src=\"down.png\" className=\"downicon\" />\r\n          </Link>\r\n        </div>\r\n        <div className={this.state.cl + \"1\"}>\r\n          <SnowStorm followMouse=\"False\" />\r\n          <h1 className=\"title\">{dt.title}</h1>\r\n          <h2 className=\"subtitle\">{dt.subtitle}</h2>\r\n          <div>\r\n            {Object.keys(dt.links).map(key => {\r\n              return <SocialIcon url={dt.links[key]} className=\"icon\" />;\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        <Element name=\"test1\" className=\"element\"></Element>\r\n        {Object.keys(dt.section).map(key => {\r\n          return (\r\n            <Fp\r\n              cl={this.state.cl + dt.section[key].color}\r\n              tit={dt.section[key].title}\r\n              cn={dt.section[key].cnt}\r\n              lin=\"\"\r\n              ln={dt.section[key].color}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default pageload;\r\n","import React  from \"react\";\nimport \"./App.css\";\n\nimport Pageload from \"./pageload\";\n\nfunction App() {\n   \n  \n  return ( \n     <Pageload />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}